// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	domain "foodsharing-backend/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsers) Create(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsers)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUsers) Delete(ctx context.Context, id domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUsersMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsers)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockUsers) GetAll(ctx context.Context) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUsersMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUsers)(nil).GetAll), ctx)
}

// GetByEmail mocks base method.
func (m *MockUsers) GetByEmail(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUsersMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUsers)(nil).GetByEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockUsers) GetByID(ctx context.Context, id domain.ID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsersMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsers)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockUsers) Update(ctx context.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUsersMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsers)(nil).Update), ctx, user)
}

// MockGroups is a mock of Groups interface.
type MockGroups struct {
	ctrl     *gomock.Controller
	recorder *MockGroupsMockRecorder
}

// MockGroupsMockRecorder is the mock recorder for MockGroups.
type MockGroupsMockRecorder struct {
	mock *MockGroups
}

// NewMockGroups creates a new mock instance.
func NewMockGroups(ctrl *gomock.Controller) *MockGroups {
	mock := &MockGroups{ctrl: ctrl}
	mock.recorder = &MockGroupsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroups) EXPECT() *MockGroupsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroups) Create(ctx context.Context, group *domain.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGroupsMockRecorder) Create(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroups)(nil).Create), ctx, group)
}

// Delete mocks base method.
func (m *MockGroups) Delete(ctx context.Context, id domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupsMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroups)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockGroups) GetAll(ctx context.Context) ([]domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGroupsMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGroups)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockGroups) GetByID(ctx context.Context, id domain.ID) (domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGroupsMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGroups)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockGroups) GetByName(ctx context.Context, name string) ([]domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].([]domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockGroupsMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockGroups)(nil).GetByName), ctx, name)
}

// GetByPermissions mocks base method.
func (m *MockGroups) GetByPermissions(ctx context.Context, permission domain.Permission) ([]domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPermissions", ctx, permission)
	ret0, _ := ret[0].([]domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPermissions indicates an expected call of GetByPermissions.
func (mr *MockGroupsMockRecorder) GetByPermissions(ctx, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPermissions", reflect.TypeOf((*MockGroups)(nil).GetByPermissions), ctx, permission)
}

// Update mocks base method.
func (m *MockGroups) Update(ctx context.Context, group domain.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGroupsMockRecorder) Update(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroups)(nil).Update), ctx, group)
}

// MockSessions is a mock of Sessions interface.
type MockSessions struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsMockRecorder
}

// MockSessionsMockRecorder is the mock recorder for MockSessions.
type MockSessionsMockRecorder struct {
	mock *MockSessions
}

// NewMockSessions creates a new mock instance.
func NewMockSessions(ctrl *gomock.Controller) *MockSessions {
	mock := &MockSessions{ctrl: ctrl}
	mock.recorder = &MockSessionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessions) EXPECT() *MockSessionsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessions) Create(ctx context.Context, session domain.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSessionsMockRecorder) Create(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessions)(nil).Create), ctx, session)
}

// GetByRefreshToken mocks base method.
func (m *MockSessions) GetByRefreshToken(ctx context.Context, refreshToken string) (domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefreshToken indicates an expected call of GetByRefreshToken.
func (mr *MockSessionsMockRecorder) GetByRefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefreshToken", reflect.TypeOf((*MockSessions)(nil).GetByRefreshToken), ctx, refreshToken)
}

// GetByUserID mocks base method.
func (m *MockSessions) GetByUserID(ctx context.Context, userID domain.ID) ([]domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockSessionsMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockSessions)(nil).GetByUserID), ctx, userID)
}

// MockDonorCompanies is a mock of DonorCompanies interface.
type MockDonorCompanies struct {
	ctrl     *gomock.Controller
	recorder *MockDonorCompaniesMockRecorder
}

// MockDonorCompaniesMockRecorder is the mock recorder for MockDonorCompanies.
type MockDonorCompaniesMockRecorder struct {
	mock *MockDonorCompanies
}

// NewMockDonorCompanies creates a new mock instance.
func NewMockDonorCompanies(ctrl *gomock.Controller) *MockDonorCompanies {
	mock := &MockDonorCompanies{ctrl: ctrl}
	mock.recorder = &MockDonorCompaniesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDonorCompanies) EXPECT() *MockDonorCompaniesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDonorCompanies) Create(ctx context.Context, company *domain.DonorCompany) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDonorCompaniesMockRecorder) Create(ctx, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDonorCompanies)(nil).Create), ctx, company)
}

// Delete mocks base method.
func (m *MockDonorCompanies) Delete(ctx context.Context, id domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDonorCompaniesMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDonorCompanies)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockDonorCompanies) GetAll(ctx context.Context) ([]domain.DonorCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.DonorCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDonorCompaniesMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDonorCompanies)(nil).GetAll), ctx)
}

// GetByCity mocks base method.
func (m *MockDonorCompanies) GetByCity(ctx context.Context, cityID string) ([]domain.DonorCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCity", ctx, cityID)
	ret0, _ := ret[0].([]domain.DonorCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCity indicates an expected call of GetByCity.
func (mr *MockDonorCompaniesMockRecorder) GetByCity(ctx, cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCity", reflect.TypeOf((*MockDonorCompanies)(nil).GetByCity), ctx, cityID)
}

// GetByID mocks base method.
func (m *MockDonorCompanies) GetByID(ctx context.Context, id domain.ID) (domain.DonorCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.DonorCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDonorCompaniesMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDonorCompanies)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockDonorCompanies) Update(ctx context.Context, company domain.DonorCompany) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDonorCompaniesMockRecorder) Update(ctx, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDonorCompanies)(nil).Update), ctx, company)
}

// MockActs is a mock of Acts interface.
type MockActs struct {
	ctrl     *gomock.Controller
	recorder *MockActsMockRecorder
}

// MockActsMockRecorder is the mock recorder for MockActs.
type MockActsMockRecorder struct {
	mock *MockActs
}

// NewMockActs creates a new mock instance.
func NewMockActs(ctrl *gomock.Controller) *MockActs {
	mock := &MockActs{ctrl: ctrl}
	mock.recorder = &MockActsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActs) EXPECT() *MockActsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActs) Create(ctx context.Context, act *domain.Act) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, act)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockActsMockRecorder) Create(ctx, act interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActs)(nil).Create), ctx, act)
}

// Delete mocks base method.
func (m *MockActs) Delete(ctx context.Context, id domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockActsMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActs)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockActs) GetAll(ctx context.Context) ([]domain.Act, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Act)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockActsMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockActs)(nil).GetAll), ctx)
}

// GetByDonorCompanyID mocks base method.
func (m *MockActs) GetByDonorCompanyID(ctx context.Context, donorCompanyID domain.ID) ([]domain.Act, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDonorCompanyID", ctx, donorCompanyID)
	ret0, _ := ret[0].([]domain.Act)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDonorCompanyID indicates an expected call of GetByDonorCompanyID.
func (mr *MockActsMockRecorder) GetByDonorCompanyID(ctx, donorCompanyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDonorCompanyID", reflect.TypeOf((*MockActs)(nil).GetByDonorCompanyID), ctx, donorCompanyID)
}

// GetByID mocks base method.
func (m *MockActs) GetByID(ctx context.Context, id domain.ID) (domain.Act, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Act)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockActsMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockActs)(nil).GetByID), ctx, id)
}

// GetByUserID mocks base method.
func (m *MockActs) GetByUserID(ctx context.Context, userID domain.ID) ([]domain.Act, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Act)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockActsMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockActs)(nil).GetByUserID), ctx, userID)
}

// Update mocks base method.
func (m *MockActs) Update(ctx context.Context, act domain.Act) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, act)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockActsMockRecorder) Update(ctx, act interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockActs)(nil).Update), ctx, act)
}

// MockActContents is a mock of ActContents interface.
type MockActContents struct {
	ctrl     *gomock.Controller
	recorder *MockActContentsMockRecorder
}

// MockActContentsMockRecorder is the mock recorder for MockActContents.
type MockActContentsMockRecorder struct {
	mock *MockActContents
}

// NewMockActContents creates a new mock instance.
func NewMockActContents(ctrl *gomock.Controller) *MockActContents {
	mock := &MockActContents{ctrl: ctrl}
	mock.recorder = &MockActContentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActContents) EXPECT() *MockActContentsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActContents) Create(ctx context.Context, contents ...domain.ActContent) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range contents {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockActContentsMockRecorder) Create(ctx interface{}, contents ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, contents...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActContents)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockActContents) Delete(ctx context.Context, contentIDs ...domain.ID) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range contentIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockActContentsMockRecorder) Delete(ctx interface{}, contentIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, contentIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActContents)(nil).Delete), varargs...)
}

// GetByActID mocks base method.
func (m *MockActContents) GetByActID(ctx context.Context, actID domain.ID) ([]domain.ActContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByActID", ctx, actID)
	ret0, _ := ret[0].([]domain.ActContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByActID indicates an expected call of GetByActID.
func (mr *MockActContentsMockRecorder) GetByActID(ctx, actID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByActID", reflect.TypeOf((*MockActContents)(nil).GetByActID), ctx, actID)
}

// GetByID mocks base method.
func (m *MockActContents) GetByID(ctx context.Context, id domain.ID) (domain.ActContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.ActContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockActContentsMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockActContents)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockActContents) Update(ctx context.Context, contents ...domain.ActContent) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range contents {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockActContentsMockRecorder) Update(ctx interface{}, contents ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, contents...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockActContents)(nil).Update), varargs...)
}
